{"version":3,"sources":["types/base.ts","types/ui.ts","types/util.ts","utils.ts","constants.ts","state.ts","components/modals/ClearDialog.tsx","components/Listing.tsx","components/modals/DebugDialog.tsx","components/modals/ExportDialog.tsx","components/modals/LoadDialog.tsx","components/modals/SaveDialog.tsx","components/EditMenu.tsx","components/Header.tsx","components/EditField.tsx","components/VolumeEditor.tsx","components/Sidebar.tsx","components/EdgeSVG.tsx","components/AccessPointSVG.tsx","components/StageSVG.tsx","components/Graph.tsx","components/Editor.tsx","components/Assets.tsx","components/App.tsx","index.tsx"],"names":["VolumeType","DialogOption","ErrorKind","error","errorKind","message","kind","findStage","stages","id","stage","find","stageId","StageNotFound","remoteMethodToString","name","requestType","responseType","instantiateAsset","asset","remoteMethodId","uuid","method","methods","RemoteMethodNotFound","findRemoteMethod","requester","type","responder","truncate","length","rx","Math","max","methodName","assetId","volumes","List","x","y","ry","compatibleMethods","equal","fields","accessPointLocation","accessPointKind","fileContent","element","a","files","undefined","size","file","first","text","FileInputError","map","join","exportState","assets","edges","zip","JSZip","dockerCompose","version","services","image","source","target","toList","forEach","idx","replaceAll","toArray","ports","config","host","port","links","requesterId","responderId","field","dump","generateAsync","findAsset","AssetNotFound","reportError","console","initialState","Set","actions","reducer","state","action","code","root","parse","nestedArray","filter","reflectionObject","toJSON","obj","flatMap","service","methodsArray","lookupType","streamed","requestStream","responseStream","e","ParsingError","protobufToRemoteMethods","protobufCode","add","remove","assetToDelete","newAssets","newStages","newEdges","stageToDelete","stageToUpdate","stageToAddVolume","stageWithUpdatedVolumes","push","volume","edge","useStore","create","redux","partialState","Date","useDispatch","dispatch","useUpdateStage","useAssets","useStages","useEdges","ClearDialog","show","close","Modal","onEscapeKeyDown","Header","Title","CloseButton","onClick","Body","Button","variant","Listing","content","language","style","position","dark","customStyle","padding","borderRadius","right","top","navigator","clipboard","writeText","DebugDialog","Accordion","reverse","date","Item","eventKey","toString","textAlign","width","display","toLocaleString","JSON","stringify","ExportDialog","useState","filename","setFilename","exportSolution","blob","saveAs","Form","Label","Control","placeholder","value","onChange","FloatingLabel","controlId","label","Select","LoadDialog","restoreState","fileUploadRef","useRef","ref","accept","current","serialized","key","SaveDialog","serializeState","Blob","EditMenu","currentDialog","setCurrentDialog","closeDialog","Container","ListGroup","horizontal","Save","Load","Clear","Export","whiteSpace","Debug","Navbar","Nav","Brand","href","Text","EditState","EditField","setValue","Display","editState","setEditState","fieldValue","setFieldValue","Edit","Row","Col","VolumeAddingForm","selectStageId","updateStage","setSource","setTarget","Bind","disabled","updated","volumeId","VolumeEditor","Table","findIndex","stageWithoutVolume","deleteVolume","nil","StageAddingForm","methodSelection","setMethodSelection","addStage","useEffect","selectedAsset","useMemo","colSpan","defaultValue","Sidebar","selectedStageId","ButtonGroup","EdgeSVG","origin","destination","x1","y1","x2","y2","stroke","strokeOpacity","strokeWidth","AccessPointSVG","accessPoint","location","color","MD5","slice","r","cx","outerRadius","cy","fillOpacity","fill","StageSVG","drag","setDrag","restartSimulation","cursor","onMouseDown","clientX","clientY","offset","dragKind","pointerEvents","textAnchor","fontSize","loc","oppositeStage","onMouseUp","edgeId","Graph","forceSimulation","stop","simulation","useReducer","update","nodes","valueSeq","force","forceX","strength","forceY","height","forceManyBody","alpha","alphaTarget","restart","on","fx","fy","border","viewBox","onMouseMove","onMouseLeave","eloc","Editor","AssetAddingForm","createAsset","setName","setImage","filesRef","inputElement","Assets","updateAsset","App","basename","process","Tabs","Tab","title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67ff025c.chunk.js","sourcesContent":["import { List, Set } from 'immutable';\nimport { SimulationNodeDatum } from 'd3-force';\nimport { IType } from 'protobufjs';\nimport { Coordinates, Path, UUID } from './util';\n\n/**\n * A simple extension of the Protobuf Message Type\n * Adds the name of the type, which for us is important, and a single boolean field denoting\n * whether the message is streamed\n */\nexport interface MessageType extends IType {\n  name: string;\n  streamed: boolean;\n}\n\n/**\n * A Node in a d3-force simulation that has required x and y coordinates\n * The SimulationNodeDatum type has x: number and y: number properties, but they are both marked\n * as optional. This type makes them required\n */\nexport type SimulationNodeDatumWithRequiredCoordinates = SimulationNodeDatum & Coordinates;\n\n/**\n * Begin Id classes\n */\n\n/**\n * An object that either is a Remote Method or has exactly one associated Remote Method\n * @interface\n * @property {UUID} remoteMethodId - a UUID to uniquely identify the Remote Method\n */\nexport interface HasRemoteMethodId {\n  remoteMethodId: UUID;\n}\n\nexport interface HasRequesterId {\n  requesterId: UUID;\n}\n\nexport interface HasResponderId {\n  responderId: UUID;\n}\n\n/**\n * An object that either is an Asset or has exactly one associated Asset\n * @interface\n * @property {UUID} assetId - a UUID to uniquely identify the Asset\n */\nexport interface HasAssetId {\n  assetId: UUID;\n}\n\n/**\n * An object that either is a Stage or has exactly one associated Stage\n * @interface\n * @property {UUID} stageId - a UUID to uniquely identify the stage\n */\nexport interface HasStageId {\n  stageId: UUID;\n}\n\n/**\n * An object that either is an Edge or has exactly one associated Edge\n * @interface\n * @property {UUID} edgeId - a UUID to uniquely identify the Edge\n */\nexport interface HasEdgeId {\n  edgeId: UUID;\n}\n\n/**\n * An object that either is an Edge or has exactly one associated Edge\n * @interface\n * @property {UUID} edgeId - a UUID to uniquely identify the Edge\n */\nexport interface HasVolumeId {\n  volumeId: UUID;\n}\n\n/**\n * An RPC method that forms part of a Asset's interface\n * @interface\n * @property {string} name\n * @property {MessageType} requestType - the type of the expected inputs to the method\n * @property {MessageType} responseType - the type of the outputs of the method\n */\nexport interface RemoteMethod extends HasRemoteMethodId {\n  kind: 'RemoteMethod';\n  name: string;\n  requestType: MessageType;\n  responseType: MessageType\n}\n\n\n/**\n * An Asset is a template from which stages in the editor can be made\n * @interface\n * @property {string} name               - The human-readable name of the asset\n * @property {string} image              - An image name, like sipgisr/image-source:latest\n * @property {Set<RemoteMethod>} methods - The method-interfaces exposed by this asset\n */\nexport interface Asset extends HasAssetId {\n  kind: 'Asset';\n  name: string;\n  image: string;\n  methods: Set<RemoteMethod>;\n}\n\n/**\n * A stage is one computer in the distributed system. It is created from an Asset, has a name, and\n * takes inputs and returns outputs\n * @interface\n * @property {string} - name\n * @property {List<AccessPoint>} accessPoints -\n *   A list of interfaces associated with the stage. This list is created from the parent Asset's\n *   methods object, with each RemoteMethod converted into a pair of AccessPoint's, one for input\n *   and the other for output. These AccessPoint's can then be connected to other nodes to\n *   establish a network topology\n * @property {List<Volume>} volumes -\n *   A set of volumes, serving as disk mappings from a path on the container to a path on the host\n *   disk. Adding these volumes allows one to directly manipulate files in a running system\n */\nexport interface Stage extends SimulationNodeDatumWithRequiredCoordinates, HasStageId, HasAssetId {\n  kind: 'Stage';\n  name: string;\n  methodName: string;\n  requester: Requester;\n  responder: Responder;\n  volumes: List<Volume>;\n  // The radii of the ellipse\n  rx: number;\n  ry: number;\n}\n\nexport interface Requester {\n  kind: 'Requester';\n  type: MessageType;\n}\n\nexport interface Responder {\n  kind: 'Responder';\n  type: MessageType;\n}\n\nexport type AccessPoint = Requester | Responder;\nexport type AccessPointKind = 'Requester' | 'Responder';\n\n/**\n * A simple enum specifying what kind of volume binding will be used. Currently, only bind is\n * supported.\n */\nexport enum VolumeType {\n  Bind = 'bind'\n}\n\n/**\n * A disk volume mapping. Allows a mapping between a path in the container and a path on disk\n */\nexport interface Volume extends HasVolumeId {\n  type: VolumeType;\n  source: Path;\n  target: Path;\n}\n\n/**\n * An edge connecting two matching AccessPoint's\n * @interface\n * @property {UUID} requesterId -\n *   A stageId, that identifies a stage and the accessPoint in that stage that\n *   will be the requester\n * @property {UUID} responderId -\n *   Same as above, but for the responder\n */\nexport interface Edge extends HasEdgeId {\n  /**\n   * Both UUID's represent Stage's\n   */\n  requesterId: UUID;\n  responderId: UUID;\n}","import { Coordinates, UUID } from './util';\nimport { AccessPoint, AccessPointKind, HasAssetId, Stage } from './base';\n\n/**\n * Represents an active drag.\n * @interface\n * @property {Coordinates} offset -\n *   the original offset between the cursor beginning and the coordinates in the SVG grid\n * @property {Coordinates} cursor -\n *   the current absolute location of the cursor\n * @property {Stage | AccessPoint} element -\n *  The element being dragged. The only two kinds of things that can be dragged are:\n *    - stages, which can be dragged around the editor\n *    - AccessPoints, which can be dragged to connect them to other AccessPoint's\n */\nexport interface Drag {\n  offset: Coordinates;\n  cursor: Coordinates;\n  stage: Stage;\n  dragKind: 'Stage' | AccessPointKind;\n}\n\n/**\n * The different possible dialogs that can be displayed to the user\n * Each one represents a different modal that will be displayed\n */\nexport enum DialogOption {\n  Save, Load, Export, Clear, Debug\n}","/**\n * This file defines simple utility types that are used for other operations\n */\n\n/**\n * An interface that represents the x and y coordinates of an object in space\n * @property {number} x\n * @property {number} y\n */\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\n/**\n * A Universally Unique Identifier, as generated by the uuid library.\n */\nexport type UUID = string;\n\n/**\n * A path on disk\n */\nexport type Path = string;\n\n/**\n * A type identifying what kind of problem caused an error\n */\nexport enum ErrorKind {\n  ParsingError = 'ParsingError',\n  AssetNotFound = 'AssetNotFound',\n  RemoteMethodNotFound = 'RemoteMethodNotFound',\n  StageNotFound = 'StageNotFound',\n  AccessPointNotFound = 'AccessPointNotFound',\n  FileInputError = 'FileInputError'\n}\n\n/**\n * A custom error type, used for reporting errors in the result type below\n * @interface\n * @property {ErrorKind} errorKind - what kind of problem caused this error\n * @property {string} message - a human-language description of what caused the error\n */\nexport interface Error {\n  kind: 'Error',\n  errorKind: ErrorKind;\n  message: string;\n}\n\n/**\n * A result type, as in Haskell or Rust. Used to either produce a value or fail with a given error\n */\nexport type Result<T> = T | Error;","import { Service, parse } from 'protobufjs';\nimport { MD5 } from 'object-hash';\nimport { List, Map, Set } from 'immutable';\nimport  { v4 as uuid } from 'uuid';\nimport { dump } from 'js-yaml';\nimport JSZip from 'jszip';\nimport {\n  truncate\n} from 'lodash';\nimport equal from 'fast-deep-equal';\nimport { DEFAULT_Y_RADIUS } from './constants';\nimport {\n  AccessPointKind,\n  Asset,\n  Coordinates,\n  DockerCompose,\n  Error,\n  ErrorKind,\n  HasRemoteMethodId,\n  OutputConfig,\n  RemoteMethod,\n  Requester,\n  Responder,\n  Result,\n  Stage,\n  State,\n  UUID\n} from './types';\n\n// TODO perhaps move this type into types.ts to avoid a circular dependency?\n\n/**\n * Create an error with an ErrorKind and message\n * @param {ErrorKind} errorKind\n * @param {string} message\n */\nexport function error(errorKind: ErrorKind, message: string): Error {\n  return {\n    kind: 'Error',\n    errorKind,\n    message\n  };\n}\n\n/**\n * Attempt to find the stage with the given ID\n * @param {State} state - the application state containing the stages to search\n * @param {UUID} id - the id to search for\n * @return {Result<Asset>} the found stage, or an error if not found\n */\nexport function findStage(stages: Set<Stage>, id: UUID): Result<Stage> {\n  const stage = stages.find(({ stageId }) => stageId === id);\n  if (stage) {\n    return stage;\n  } else {\n    return error(\n      ErrorKind.StageNotFound,\n      `Cannot find Stage with id ${id}`\n    );\n  }\n}\n\nexport function findRemoteMethod(asset: Asset, remoteMethodId: UUID): Result<RemoteMethod> {\n  const method = asset.methods.find(method => method.remoteMethodId === remoteMethodId);\n  if (method) {\n    return method;\n  } else {\n    return error(\n      ErrorKind.RemoteMethodNotFound,\n      `Cannot find Remote Method with id ${remoteMethodId} in asset ${asset}`\n    );\n  }\n}\n\n/**\n * Convert literal ProtoBuf code into a list of RemoteMethod's\n * @param {string} code - the source code of a protobuf file\n * @returns {Set<RemoteMethod>} - a set of RemoteMethod objects representing the methods of the\n * node's interface\n */\nexport function protobufToRemoteMethods(code: string): Result<Set<RemoteMethod>> {\n  try {\n    // Parse out the root object from the ProtoBuf code\n    const { root } = parse(code);\n    // this is a bit of a hack to get only the services.\n    // We start with all the contained objects (nestedArray)\n    // Then we filter out only the ones whose JSON representations have a `methods` field\n    // Finally, we cast to `Service` objects\n    const services = root\n      .nestedArray\n      .filter(reflectionObject => reflectionObject.toJSON().methods)\n      .map(obj => obj as Service);\n\n    // FlatMap all services' methodsArray's into one Set of RemoteMethods\n    return Set(services.flatMap(service => service\n      .methodsArray\n      .map(method => ({\n        kind: 'RemoteMethod',\n        name: method.name,\n        requestType: {\n          ...root.lookupType(method.requestType).toJSON(),\n          name: method.requestType,\n          streamed: method.requestStream || false\n        },\n        responseType: {\n          ...root.lookupType(method.responseType).toJSON(),\n          name: method.responseType,\n          streamed: method.responseStream || false\n        },\n        remoteMethodId: uuid()\n      })))\n    );\n  } catch (e: any) {\n    // If we get an exception at any point, return a ParsingError\n    return error(ErrorKind.ParsingError, e.message);\n  }\n}\n\n/**\n * Convert a Remote Method to a human-readable string\n * @param {RemoteMethod} method - a remote method\n * @return {string} a human-readable string\n */\nexport function remoteMethodToString({ name, requestType, responseType }: RemoteMethod): string {\n  return `${name}(${requestType.name}): ${responseType.name}`;\n}\n\nexport function methodToRequesterAndResponder({ requestType, responseType }: RemoteMethod): {\n  requester: Requester,\n  responder: Responder\n} {\n  return {\n    requester: {\n      kind: 'Requester',\n      type: requestType\n    },\n    responder: {\n      kind: 'Responder',\n      type: responseType\n    }\n  };\n}\n\n/**\n * Given a asset, instantiate it so that it can be used in the simulation\n * @param {Asset} asset\n * @param {string} name - the name to give the asset when it is instantiated\n * @return {Stage} a stage object created from the given `asset`, and named `name`\n */\nexport function instantiateAsset(\n  asset: Asset,\n  { remoteMethodId }: HasRemoteMethodId\n): Result<Stage> {\n  const stageId = uuid();\n\n  const method = findRemoteMethod(asset, remoteMethodId);\n\n  if (method.kind === 'RemoteMethod') {\n    const { requester, responder } = methodToRequesterAndResponder(method);\n    const name = truncate(`${asset.name}-${method.name}`, { length: 25 });\n    const rx = Math.max(name.length * 6, 50);\n    // TODO make this configurable somewhere\n    return {\n      kind: 'Stage',\n      name,\n      methodName: method.name,\n      requester,\n      responder,\n      stageId,\n      assetId: asset.assetId,\n      volumes: List(),\n      x: 0,\n      y: 0,\n      rx,\n      ry: DEFAULT_Y_RADIUS\n    };\n  } else {\n    return method;\n  }\n}\n\n/**\n * Can two methods be connected?\n * @param {AccessPoint} left, right - two `AccessPoint`s, representing two methods\n * @return {boolean} whether the tow can be connected\n */\nexport function compatibleMethods(requester: Requester, responder: Responder): boolean {\n  return equal(requester.type.fields, responder.type.fields);\n}\n\n/**\n * Given an object, return a color value for it\n * @param {any} obj - any object\n * @return {string} a hex code of the form '#XXXXXX' representing a color for the object\n */\nexport function objectToColor(obj: any): string {\n  return `#${MD5(obj).slice(0,6)}`;\n}\n\nexport function accessPointLocation({ x, y }: Coordinates, accessPointKind: AccessPointKind): Coordinates {\n  return {\n    x,\n    y: accessPointKind === 'Requester' ? y + DEFAULT_Y_RADIUS : y - DEFAULT_Y_RADIUS\n  };\n}\n\n/**\n * Calculate the x-y value of a point on an ellipse, based on radial coordinates\n * @param {number} theta - the angle of the point from the center, in radians\n * @param {number} rx - the x-axis radius of the ellipse\n * @param {number} ry - the y-axis radius of the ellipse\n * @param {number} cx - the x-coordinate of the center of the ellipse\n * @param {number} cy - the y-coordinate of the center of the ellipse\n * @return {Coordinates} the Cartesian coordinates of the point on the ellipse\n */\nexport function ellipsePolarToCartesian(\n  theta: number,\n  rx: number,\n  ry: number,\n  cx = 0,\n  cy = 0\n): Coordinates {\n  const { sin, cos } = Math;\n  return {\n    x: rx * cos(theta) + cx,\n    y: ry * sin(theta) + cy\n  };\n}\n\n/**\n * A function that takes a react ref to a file input tag and outputs the plain-text value of the\n * currently-uploaded file\n * @param {HTMLInputElement} element - an HTML tag representing the file input element\n * @return {Promise<Result<string>>} a promise containing either the content of the file or an\n * error if the number of files attached was not exactly one\n */\nexport async function fileContent(element: HTMLInputElement): Promise<Result<string>> {\n  // Get the set of files associated with the current file input\n  // Note that we coerce to undefined in case of a falsy value here because the `Set`\n  // constructor does not accept null.\n  const files = List(element?.files || undefined);\n  // We should make sure that the list has exactly one file\n  if (files.size === 1) {\n    // We can assert-nonnull here because we know the files list has a first element\n    const file = files.first()!;\n    // Get the content of the file\n    const text = await file.text();\n    return text;\n  } else {\n    return error(ErrorKind.FileInputError, `Didn't find exactly one protobuf file for the asset. Files were [${files.map(file => file.name).join(', ')}]}`);\n  }\n}\n\n/**\n * Given the state of the application, serialize it into a string\n * @param {State} state\n * @return {string} a string containing all state information of the application\n */\nexport function serializeState(state: State): string {\n  return JSON.stringify(state);\n}\n\n/**\n * Given a string, reconstitute it into application state\n * FIXME this function does not perform any validation, it just naïvely JSON-parses\n * @param {string} serialized - a string containing application state, as produced by the function\n * above\n * @return {State} the reconstituted state\n */\nexport function deserializeState(serialized: string): State {\n  const parsed = JSON.parse(serialized, (key, value) => {\n    if (\n      key === 'accessPoints' ||\n      key === 'actions' ||\n      key === 'volumes'\n    ) {\n      return List(value);\n    } else if (\n      key === 'methods' ||\n      key === 'assets' ||\n      key === 'stages' ||\n      key === 'edges'\n    ) {\n      return Set(value);\n    } else {\n      return value;\n    }\n  });\n  return parsed;\n}\n\n/**\n * Convert the current application state into a docker-compose format\n * that can be used with https://github.com/DuarteMRAlves/Pipeline-Orchestrator\n * @param {State} state - the application state\n * @return {Promise<Blob>} a ZIP file containing the docker-compose.yml and config.yml files\n */\nexport async function exportState({ assets, stages, edges }: State): Promise<Blob> {\n  const zip = new JSZip();\n\n  const dockerCompose: DockerCompose = {\n    version: '3',\n    services: {\n      'orchestrator-node': {\n        image: 'sipgisr/grpc-orchestrator:latest',\n        volumes: [\n          {\n            type: 'bind',\n            source: './config.yml',\n            target: '/app/config/config.yml'\n          }\n        ]\n      }\n\n    }\n  };\n\n  stages.toList().forEach(({ name, assetId, volumes }, idx) => {\n    const asset = assets.find(asset => asset.assetId === assetId);\n    if (!(name in dockerCompose.services) && asset) {\n      dockerCompose.services[name.replaceAll(/\\s+/g, '-')] = {\n        image: asset.image,\n        volumes: volumes\n          .map(({ source, target, type }) => ({ source, target, type }))\n          .toArray(),\n        ports: [`${8061 + idx}:8062`]\n      };\n    }\n  });\n\n  const config: OutputConfig = {\n    stages: stages.map(({ name }) => ({\n      name,\n      host: name.replaceAll(/\\s+/g, '-'),\n      port: 8061\n    })).toArray(),\n    links: edges.map(({ requesterId, responderId }) => {\n      const requester = findStage(stages, requesterId);\n      const responder = findStage(stages, responderId);\n      if (requester.kind === 'Error') {\n        throw requester;\n      } else if (responder.kind === 'Error') {\n        throw responder;\n      } else {\n        return {\n          source: {\n            stage: requester.name,\n            field: requester.methodName\n          },\n          target: {\n            stage: responder.name,\n            field: responder.methodName\n          }\n        };\n      }\n    }).toArray()\n  };\n\n  // Add the data to the zip as yaml\n  zip.file('docker-compose.yml', dump(dockerCompose));\n  zip.file('config.yml',         dump(config));\n\n  // Generate a blob and return\n  return zip.generateAsync({ type: 'blob' });\n}\n\n/**\n * Attempt to find the asset with the given ID\n * @param {State} state - the application state containing the assets to search\n * @param {UUID} id - the id to search for\n * @return {Result<Asset>} the found asset, or an error if not found\n */\nexport function findAsset(assets: Set<Asset>, id: UUID): Result<Asset> {\n  const asset = assets.find(({ assetId }) => assetId === id);\n  if (asset) {\n    return asset;\n  } else {\n    return error(\n      ErrorKind.AssetNotFound,\n      `Cannot find Asset with id ${id}`\n    );\n  }\n}\n\n/**\n * Given an error, print it to the console\n * @param {Error}\n */\nexport function reportError({ errorKind, message }: Error) {\n  console.error(`${errorKind}: ${message}`);\n}","/**\n * The default height of stage ellipses in the editor\n */\nexport const DEFAULT_Y_RADIUS = 30;","import create from 'zustand';\nimport { redux } from 'zustand/middleware';\nimport { List, Set } from 'immutable';\nimport { v4 as uuid } from 'uuid';\nimport {\n  Action,\n  Asset,\n  Edge,\n  Result,\n  Stage,\n  State\n} from './types';\nimport {\n  findAsset,\n  findStage,\n  protobufToRemoteMethods\n} from './utils';\n\n/**\n * The initial state when the application is first loaded. Also used when clearing the application\n * and restoring to this first state\n */\nconst initialState: State = {\n  kind: 'State',\n  assets: Set(),\n  stages: Set(),\n  edges: Set(),\n  actions: List()\n};\n\n/**\n * This is the fundamental state management function for the application. It takes a state, and an\n * action and returns a new state.\n *\n * The core of all Drafter Application logic is defined in this function\n *\n * @param {State} state -\n *   The initial state, before any action takes place. If any failure occurs,\n *   this state will be restored\n * @param {Action} action - An action, which will be applied as a a modification against the State\n * @return {Result<Partial<State>>}\n *   A partial state object. This will define some properties of State, and the missing ones will\n *   be filled in from the initial State.\n */\nfunction reducer(state: State, action: Action): Result<Partial<State>> {\n  switch (action.type) {\n  case 'CreateAsset':\n    const methods = protobufToRemoteMethods(action.protobufCode);\n    if (!('errorKind' in methods)) {\n      return {\n        assets: state.assets.add({\n          kind: 'Asset',\n          assetId: uuid(),\n          name: action.name,\n          image: action.image,\n          methods\n        })\n      };\n    } else {\n      // If this is an error, than just return the error\n      return methods;\n    }\n  case 'SetAssets':\n    return { ...state, assets: action.assets };\n  case 'UpdateAsset':\n    // Try to find the asset\n    const asset = findAsset(state.assets, action.asset.assetId);\n    // If finding the asset returned an error, then just propagate that error\n    if (asset.kind === 'Error') { return asset; }\n    // If we can find the current asset, remove and replace it\n    return {\n      assets: state.assets.remove(asset).add(action.asset)\n    };\n  case 'DeleteAsset':\n    // Try to find the asset\n    const assetToDelete = findAsset(state.assets, action.asset.assetId);\n    // If finding the asset returned an error, then just propagate that error\n    if (assetToDelete.kind === 'Error') { return assetToDelete; }\n    // Now delete the asset and all associated stages and edges\n    const newAssets = state.assets.remove(assetToDelete);\n    const newStages = state.stages.filter(({ assetId }) => assetToDelete.assetId !== assetId);\n    const newEdges = state.edges.filter(({ requesterId, responderId }) =>\n      findStage(newStages, requesterId).kind !== 'Error' &&\n      findStage(newStages, responderId).kind !== 'Error'\n    );\n    return {\n      assets: newAssets,\n      stages: newStages,\n      edges:  newEdges\n    };\n  case 'AddStage':\n    return { stages: state.stages.add(action.stage) };\n  case 'SetStages':\n    return { stages: action.stages };\n  case 'DeleteStage':\n    const stageToDelete = findStage(state.stages, action.stage.stageId);\n    // If finding the stage gave us an error, return that error\n    if (stageToDelete.kind === 'Error') { return stageToDelete; }\n    return {\n      stages: state.stages.remove(stageToDelete),\n      // Filter out all edges that have the give stage Id\n      edges: state.edges.filter(({ requesterId, responderId }) =>\n        stageToDelete.stageId !== requesterId && stageToDelete.stageId !== responderId\n      )\n    };\n  case 'UpdateStage':\n    // Find the current stage in the set that has the given Id\n    const stageToUpdate = findStage(state.stages, action.stage.stageId);\n    // If we've got an error, return it\n    if (stageToUpdate.kind === 'Error' ) { return stageToUpdate; }\n    // If the stage exists...\n    return {\n      stages: state.stages.remove(stageToUpdate).add({ ...stageToUpdate, ...action.stage })\n    };\n  case 'AddVolume':\n    const stageToAddVolume = findStage(state.stages, action.stageId);\n    if (stageToAddVolume.kind === 'Error') { return stageToAddVolume; }\n    const stageWithUpdatedVolumes = {\n      ...stageToAddVolume,\n      volumes: stageToAddVolume.volumes.push(action.volume)\n    };\n    const stages = state.stages.remove(stageToAddVolume).add(stageWithUpdatedVolumes);\n    return { stages };\n  case 'SetEdges':\n    return { edges: action.edges };\n  case 'AddEdge':\n    return { edges: state.edges.add(action.edge) };\n  case 'DeleteEdge':\n    return { edges: state.edges.remove(action.edge) };\n  case 'RestoreState':\n    return action.state;\n  case 'ClearState':\n    return initialState;\n  }\n}\n\n/**\n * A React Hook to bring the application State into scope\n */\nexport const useStore = create(redux(\n  (state: State, action: Action) => {\n    const partialState = reducer(state, action);\n    if (partialState.kind !== 'Error') {\n      if (partialState.actions) {\n        // If the reducer actually specified or changed the actions, then use those\n        return { ...state, ...partialState };\n      } else {\n        // If it did not, then add the current action to the history\n        return { ...state, ...partialState, actions: state.actions.push([new Date(), action]) };\n      }\n    } else {\n      // If our reducer returned an error:\n      // Pull out the kind of error and message...\n      const { errorKind, message } = partialState;\n      // Log them to console\n      console.error(`Error ${errorKind} in ${action.type}: ${message}`);\n      // And keep the existing state\n      return state;\n    }\n  }, initialState));\n\nexport function useDispatch() {\n  return useStore(state => state.dispatch);\n}\nexport function useCreateAsset() {\n  return useStore(({ dispatch }) =>\n    ({ name, image, protobufCode }: { name: string, image: string, protobufCode: string}) => dispatch({\n      type: 'CreateAsset',\n      name,\n      image,\n      protobufCode\n    }));\n}\nexport function useUpdateAsset() {\n  return useStore(({ dispatch }) => (asset: Asset) => dispatch({ type: 'UpdateAsset', asset }));\n}\n\nexport function useDeleteStage() {\n  return useStore(({ dispatch }) => (stage: Stage) => dispatch({ type: 'DeleteStage', stage }));\n}\n\nexport function useUpdateStage() {\n  return useStore(({ dispatch }) => (stage: Stage) => dispatch({ type: 'UpdateStage', stage }));\n}\n\nexport function useAssets(): [Set<Asset>, (assets: Set<Asset>) => void] {\n  return useStore(state => [state.assets, ((assets: Set<Asset>) => state.dispatch({ type: 'SetAssets', assets }))]);\n}\nexport function useStages(): Set<Stage> {\n  return useStore(state => state.stages);\n}\nexport function useEdges(): Set<Edge> {\n  return useStore(state => state.edges);\n}\nexport function useActions(): List<[Date, Action]> {\n  return useStore(state => state.actions);\n}\nexport function useRestoreState() {\n  return useStore(({ dispatch }) => (state: State) => dispatch({type: 'RestoreState', state }));\n}\nexport function useAddStage() {\n  return useStore(({ dispatch }) => (stage: Stage) => dispatch({ type: 'AddStage', stage }));\n}","import React from 'react';\nimport {\n  Button,\n  CloseButton,\n  Modal\n} from 'react-bootstrap';\nimport { useDispatch } from '../../state';\n\ninterface ClearDialogProps {\n  show: boolean;\n  close: () => void;\n}\n/**\n * A modal dialog component for confirming whether the user wishes to clear the editor\n */\nexport function ClearDialog({ show, close }: ClearDialogProps) {\n  const dispatch = useDispatch();\n  return (\n    <Modal show={show} onEscapeKeyDown={close}>\n      <Modal.Header>\n        <Modal.Title>Really clear the editor?</Modal.Title>\n        <CloseButton onClick={close} />\n      </Modal.Header>\n      <Modal.Body>\n        <Button variant='primary' onClick={close}>Cancel</Button>\n        &nbsp;\n        <Button variant='danger' onClick={() => {\n          dispatch({ type: 'ClearState' });\n          close();\n        }}>Clear</Button>\n      </Modal.Body>\n    </Modal>\n  );\n}","import React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { Button } from 'react-bootstrap';\nimport { FaCopy } from 'react-icons/fa';\n\n// This is the the basic unit of size\nconst unit = 5;\n\ninterface ListingProps {\n  content: string\n  language: string\n}\n/**\n * A simple utility component that displays syntax-highlighted source code\n */\nexport default function Listing({ content, language }: ListingProps) {\n  // TODO make this div style configurable based on the current theme?\n  // TODO add syntax highlighting?\n  return <div style={{\n    position: 'relative'\n  }}>\n    <SyntaxHighlighter language={language} style={dark} customStyle={{\n      padding: `${2 * unit}px`,\n      borderRadius: `${unit}px`\n    }}>\n      {content}\n    </SyntaxHighlighter>\n    <Button\n      variant='outline-secondary'\n      size='sm'\n      style={{\n        position: 'absolute',\n        right: `${unit}px`,\n        top: `${unit}px`\n      }}\n      onClick={() =>\n        navigator.clipboard.writeText(content)\n      }\n    >\n      <FaCopy size={3 * unit}/>\n    </Button>\n  </div>;\n\n}","import React from 'react';\nimport {\n  Accordion,\n  CloseButton,\n  Modal\n} from 'react-bootstrap';\nimport Listing from '../Listing';\nimport { useStore } from '../../state';\n\n\ninterface DebugDialogProps {\n  show: boolean;\n  close: () => void;\n}\n/**\n * Modal dialog component that shows debug information\n */\nexport function DebugDialog({ show, close }: DebugDialogProps) {\n  const state = useStore();\n\n  return (\n    <Modal show={show} onEscapeKeyDown={close}>\n      <Modal.Header>\n        <Modal.Title>Debug Info</Modal.Title>\n        <CloseButton onClick={close} />\n      </Modal.Header>\n      <Modal.Body>\n        <h5>Edit History</h5>\n        <Accordion>\n          {state.actions.reverse().map(([date, action], idx) =>\n            <Accordion.Item eventKey={idx.toString()} key={idx}>\n              <Accordion.Header>\n                <span style={{\n                  textAlign: 'left',\n                  width: '40%',\n                  display: 'inline-block'\n                }}>{action.type}</span>\n                <em style={{\n                  textAlign: 'right',\n                  width: '50%',\n                  display: 'inline-block'\n                }}\n                >{date.toLocaleString()}\n                </em>\n              </Accordion.Header>\n              <Accordion.Body>\n                <Listing\n                  content={JSON.stringify(action, null, 2)}\n                  language='json'\n                />\n              </Accordion.Body>\n            </Accordion.Item>)}\n        </Accordion>\n        <br />\n        <h5>Application State</h5>\n        <Accordion>\n          <Accordion.Item eventKey='state'>\n            <Accordion.Header>\n              State\n            </Accordion.Header>\n            <Accordion.Body>\n              <Listing\n                content={JSON.stringify(state, null, 2)}\n                language='json'\n              />\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      </Modal.Body>\n    </Modal>\n  );\n}","import React, { useState } from 'react';\nimport {\n  Button,\n  CloseButton,\n  FloatingLabel,\n  Form,\n  Modal\n} from 'react-bootstrap';\nimport { exportState } from '../../utils';\nimport { useStore } from '../../state';\n\ninterface ExportDialogProps {\n  show: boolean;\n  close: () => void;\n}\n/**\n * Simple modal dialog component allowing to export the editor state to a particular format\n */\nexport function ExportDialog({ show, close }: ExportDialogProps) {\n  const state = useStore();\n  const [filename, setFilename] = useState('solution.zip');\n  const exportSolution = async () => {\n    const blob = await exportState(state);\n    saveAs(blob, filename);\n  };\n\n  return (\n    <Modal show={show} onEscapeKeyDown={close}>\n      <Modal.Header>\n        <Modal.Title>Export Solution</Modal.Title>\n        <CloseButton onClick={close} />\n      </Modal.Header>\n      <Modal.Body>\n        <Form.Label >Filename</Form.Label>\n        <Form.Control\n          placeholder='solution.zip'\n          value={filename}\n          onChange={e => setFilename(e.target.value)}\n        />\n        <br />\n        {/* TODO other export options here */}\n        <FloatingLabel controlId='floatingSelect' label='Export to'>\n          <Form.Select>\n            <option>Docker Compose</option>\n          </Form.Select>\n        </FloatingLabel>\n        <br />\n        <Button onClick={() => {\n          exportSolution();\n          close();\n        }}>Export</Button>\n      </Modal.Body>\n    </Modal>\n  );\n}","import React, { useRef } from 'react';\nimport { Button, CloseButton, Form, Modal } from 'react-bootstrap';\nimport { useRestoreState } from '../../state';\nimport { deserializeState, fileContent } from '../../utils';\n\ninterface LoadDialogProps {\n  show: boolean;\n  close: () => void;\n}\n/**\n * A component representing a modal dialog that allows a user to load a saved file\n */\nexport function LoadDialog({ show, close }: LoadDialogProps) {\n  const restoreState = useRestoreState();\n\n  const fileUploadRef = useRef<HTMLInputElement | null>(null);\n\n  return (\n    <Modal show={show} onEscapeKeyDown={close}>\n      <Modal.Header>\n        <Modal.Title>Load a solution from a File</Modal.Title>\n        <CloseButton onClick={close} />\n      </Modal.Header>\n      <Modal.Body>\n        <Form.Label>Solution file</Form.Label>\n        <Form.Control type='file' ref={fileUploadRef} accept='.json' />\n        <br />\n        <Button onClick={async () => {\n          const content = await fileContent(fileUploadRef!.current!);\n          if (typeof content === 'string') {\n            restoreState(deserializeState(content));\n          }\n          close();\n        }}>Load</Button>\n      </Modal.Body>\n    </Modal>\n  );\n}","import React, { useState } from 'react';\nimport { saveAs } from 'file-saver';\nimport { Button, CloseButton, Form, Modal } from 'react-bootstrap';\nimport { serializeState } from '../../utils';\nimport { useStore } from '../../state';\n\ninterface SaveDialogProps {\n  show: boolean;\n  close: () => void;\n}\n/**\n * Component with a modal dialog asking the user to save the current editor state\n */\nexport function SaveDialog({ show, close }: SaveDialogProps) {\n  // TODO choose a custom extension for drafter saved documents?\n  const [filename, setFilename] = useState('solution.json');\n  const state = useStore();\n\n  // A short function to save the editor state to disk\n  const save = () => {\n    const serialized = serializeState(state);\n    saveAs(new Blob([serialized]), filename);\n    close();\n  };\n\n  return (\n    <Modal show={show} onEscapeKeyDown={close}>\n      <Modal.Header>\n        <Modal.Title>Save Solution</Modal.Title>\n        <CloseButton onClick={close} />\n      </Modal.Header>\n      <Modal.Body>\n        <Form.Label >Filename</Form.Label>\n        <Form.Control\n          placeholder='solution.json'\n          value={filename}\n          onChange={e => setFilename(e.target.value)}\n        />\n        <br />\n        <Button onClick={save}>Save</Button>\n      </Modal.Body>\n    </Modal>\n  );\n}","import React, { useState } from 'react';\nimport {\n  Container,\n  ListGroup\n} from 'react-bootstrap';\nimport { DialogOption } from '../types';\nimport {\n  ClearDialog,\n  DebugDialog,\n  ExportDialog,\n  LoadDialog,\n  SaveDialog\n} from './modals';\n\n/**\n * This component represents the menu at the top of the page which offers various utilities\n */\nexport default function EditMenu() {\n  const [currentDialog, setCurrentDialog] = useState<DialogOption | null>(null);\n\n  // Control whether the save dialog is open\n  const openSaveDialog = () => setCurrentDialog(DialogOption.Save);\n  const openLoadDialog = () => setCurrentDialog(DialogOption.Load);\n  const openClearDialog = () => setCurrentDialog(DialogOption.Clear);\n  const openExportDialog = () => setCurrentDialog(DialogOption.Export);\n  const openDebugDialog = () => setCurrentDialog(DialogOption.Debug);\n  const closeDialog = () => setCurrentDialog(null);\n\n  return (\n    <Container>\n      <ListGroup horizontal>\n        <ListGroup.Item action onClick={openSaveDialog}>Save</ListGroup.Item>\n        <ListGroup.Item action onClick={openLoadDialog}>Load</ListGroup.Item>\n        <ListGroup.Item action onClick={openClearDialog}>Clear</ListGroup.Item>\n        <ListGroup.Item action onClick={openExportDialog}>Export</ListGroup.Item>\n        <ListGroup.Item action style={{ whiteSpace: 'nowrap' }}onClick={openDebugDialog}>Debug Info</ListGroup.Item>\n      </ListGroup>\n\n      <SaveDialog show={currentDialog === DialogOption.Save} close={closeDialog} />\n      <LoadDialog show={currentDialog === DialogOption.Load} close={closeDialog} />\n      <ClearDialog show={currentDialog === DialogOption.Clear} close={closeDialog} />\n      <ExportDialog show={currentDialog === DialogOption.Export} close={closeDialog} />\n      <DebugDialog show={currentDialog === DialogOption.Debug} close={closeDialog} />\n    </Container>\n  );\n}","import React from 'react';\nimport {\n  Container,\n  Nav,\n  Navbar\n} from 'react-bootstrap';\nimport EditMenu from './EditMenu';\nimport { name, version } from '../../package.json';\n\n/**\n * Component containing the Header and navigation of the application\n */\nexport default function Header() {\n  return (\n    <Navbar>\n      <Container>\n        <Nav>\n          <Navbar.Brand href='/'>{name}</Navbar.Brand>\n          <Navbar.Text>v{version}</Navbar.Text>\n          <EditMenu />\n        </Nav>\n      </Container>\n    </Navbar>\n  );\n}","import React, { useState } from 'react';\nimport {\n  Button,\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap';\nimport { FaCheck } from 'react-icons/fa';\n\nenum EditState {\n  Edit, Display\n}\ninterface EditFieldProps {\n  value: string;\n  setValue: (value: string) => void;\n}\n/**\n * A simple utility component that displays text that can be changed when clicked\n */\nexport default function EditField({ value, setValue }: EditFieldProps) {\n  const [editState, setEditState] = useState(EditState.Display);\n  const [fieldValue, setFieldValue] = useState(value);\n\n  if (editState === EditState.Display) {\n    return <span onClick={() => setEditState(EditState.Edit)}>{value}</span>;\n  } else {\n    return <Row>\n      <Col>\n        <Form.Control value={fieldValue} onChange={({ target: { value } }) => setFieldValue(value)} />\n      </Col>\n      <Col>\n        <Button onClick={() => {\n          setValue(fieldValue);\n          setEditState(EditState.Display);\n        }}><FaCheck /></Button>\n      </Col>\n    </Row>;\n  }\n}","import React, { useState } from 'react';\nimport {\n  Button,\n  CloseButton,\n  Form,\n  Modal,\n  Table\n} from 'react-bootstrap';\nimport { v4 as uuid } from 'uuid';\nimport {\n  FaPlus,\n  FaTrash\n} from 'react-icons/fa';\nimport {\n  Stage,\n  UUID,\n  Volume,\n  VolumeType\n} from '../types';\nimport {\n  useStages,\n  useUpdateStage\n} from '../state';\n\ninterface VolumeAddingFormProps {\n  stage: Stage;\n  selectStageId: (id: UUID) => void;\n}\nfunction VolumeAddingForm({ stage, selectStageId }: VolumeAddingFormProps) {\n  const updateStage = useUpdateStage();\n  const [source, setSource] = useState('');\n  const clearSource = () => setSource('');\n  const [target, setTarget] = useState('');\n  const clearTarget = () => setTarget('');\n  const [type ] = useState(VolumeType.Bind);\n  const addVolume = () => {\n    const updated = { ...stage, volumes: stage.volumes.push({\n      volumeId: uuid(), source, target, type\n    }) };\n    updateStage(updated);\n    selectStageId(updated.stageId);\n    clearSource();\n    clearTarget();\n  };\n\n  return (\n    <tr>\n      <td>\n        <Form.Control\n          value={source}\n          onChange={({ target: { value }}) => setSource(value)}\n          placeholder='path/on/source'\n        />\n      </td>\n      <td>\n        <Form.Control\n          value={target}\n          onChange={({ target: { value }}) => setTarget(value)}\n          placeholder='path/on/target'\n        />\n      </td>\n      <td>\n        <Form.Control\n          value={type}\n          disabled\n        />\n      </td>\n      <td>\n        <Button\n          variant='primary'\n          onClick={addVolume}\n        >\n          <FaPlus />\n        </Button>\n      </td>\n    </tr>\n  );\n}\n\ninterface VolumeEditorProps {\n  stageId: UUID;\n  selectStageId: (id: UUID) => void;\n  close: () => void;\n}\n/**\n * This component is a modal that allows users to add and remove mounted volumes from stages\n */\nexport default function VolumeEditor({ stageId, selectStageId, close }: VolumeEditorProps) {\n  const stages = useStages();\n  const updateStage = useUpdateStage();\n  const stage = stages.find(stage => stage.stageId === stageId);\n  if (!stage) { return null; }\n  const deleteVolume = (id: UUID) => {\n    const idx = stage.volumes.findIndex(({ volumeId }) => volumeId === id);\n    if (idx !== -1) {\n      const stageWithoutVolume = {\n        ...stage,\n        volumes: stage.volumes.remove(idx)\n      };\n      updateStage(stageWithoutVolume);\n    } else {\n      console.error('attempt to delete volume that does not exist');\n    }\n  };\n  return (\n    <>\n      <Modal.Header>\n        <Modal.Title>{stage.name || 'No stage selected'}</Modal.Title>\n        <CloseButton onClick={close} />\n      </Modal.Header>\n      <Modal.Body>\n        <h5>Mounted Volumes</h5>\n        <Table>\n          <thead>\n            <tr>\n              <th>Source</th>\n              <th>Target</th>\n              <th>Type</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {stage?.volumes.map(({ source, target, type, volumeId }) =>\n              <tr key={volumeId}>\n                <td>{source}</td>\n                <td>{target}</td>\n                <td>{type}</td>\n                <td>\n                  <Button\n                    variant='danger'\n                    onClick={() => deleteVolume(volumeId)}\n                  >\n                    <FaTrash />\n                  </Button>\n                </td>\n              </tr> || 'No stage selected')}\n            {stageId &&\n            <VolumeAddingForm stage={stage} selectStageId={selectStageId} />}\n          </tbody>\n        </Table>\n      </Modal.Body>\n    </>\n  );\n}","import React, { useEffect, useMemo, useState } from 'react';\nimport {\n  Button,\n  ButtonGroup,\n  Col,\n  FloatingLabel,\n  Form,\n  Modal,\n  Row,\n  Table\n} from 'react-bootstrap';\nimport { FaCheck, FaEllipsisH, FaPlus, FaTrash } from 'react-icons/fa';\nimport {\n  Asset,\n  HasAssetId,\n  Stage,\n  UUID\n} from '../types';\nimport {\n  findAsset,\n  findRemoteMethod,\n  instantiateAsset,\n  reportError\n} from '../utils';\nimport {\n  useAddStage,\n  useAssets,\n  useDispatch,\n  useStages,\n  useUpdateStage\n} from '../state';\nimport EditField from './EditField';\nimport VolumeEditor from './VolumeEditor';\n\n// This is a hack-- the select element won't accept null as a value, so we define an alternate\n// null value-- nil. This hack isn't comprehensive. If the user somehow gets a UUID that is\n// equal to '0', then this will fail. However, this shouldn't happen for a UUID\nconst nil = '0';\ntype Nil = typeof nil;\nexport type MethodSelection = (HasAssetId & {\n  remoteMethodId: UUID | Nil;\n}) | Nil;\n\nfunction StageAddingForm() {\n\n\n  const [methodSelection, setMethodSelection] = useState<MethodSelection>(nil);\n  const [assets] = useAssets();\n  const addStage = useAddStage();\n\n  // Whenever assets change, set back to nil\n  useEffect(() => {\n    setMethodSelection(nil);\n  }, [assets]);\n\n  // Deduce the currently-selected asset from the methodSelection object\n  const selectedAsset = useMemo(() => {\n    if (methodSelection !== nil) {\n      const asset = findAsset(assets, methodSelection.assetId);\n      if (asset.kind === 'Asset') {\n        return asset;\n      } else {\n        reportError(asset);\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }, [methodSelection]);\n\n  return (\n    <tr>\n      <td colSpan={methodSelection !== nil ? 1 : 2}>\n        <FloatingLabel controlId='floatingSelectGrid' label='Add asset' defaultValue={nil}>\n          <Form.Select\n            aria-label='Add another asset'\n            onChange={({ target: { value } }) => {\n              if (value !== nil) {\n                setMethodSelection({\n                  assetId: value,\n                  remoteMethodId: nil\n                });\n              } else {\n                setMethodSelection(nil);\n              }\n            }}>\n            <option value={nil}>Select Asset to add</option>\n            {assets.map(({ assetId, name }) =>\n              <option key={assetId} value={assetId}>{name}</option>\n            )}\n          </Form.Select>\n        </FloatingLabel>\n      </td>\n      {methodSelection !== nil ?\n        <td>\n          <FloatingLabel controlId='floatingSelectGrid' label='Select method'>\n            <Form.Select\n              aria-label='Select method'\n              onChange={({ target: { value }}) => {\n                setMethodSelection({\n                  ...methodSelection,\n                  remoteMethodId: value\n                });\n              }}>\n              <option value={nil}>Select method from asset</option>\n              {selectedAsset!.methods.map(({ name, remoteMethodId }) =>\n                <option key={remoteMethodId} value={remoteMethodId}>{name}</option>\n              )}\n            </Form.Select>\n          </FloatingLabel>\n        </td>\n        : null}\n      <td>\n        <Button\n          disabled={methodSelection === nil || methodSelection.remoteMethodId === nil}\n          variant='primary'\n          onClick={() => {\n            if (methodSelection !== nil && methodSelection.remoteMethodId !== nil && selectedAsset) {\n              const stage = instantiateAsset(selectedAsset, methodSelection);\n              if (stage.kind === 'Stage') {\n                addStage(stage);\n              }\n            }\n          }}\n        >\n          <FaPlus />\n        </Button>\n      </td>\n    </tr>\n  );\n}\n\n/**\n * This component is used to add and remove stages from the editor\n */\nexport default function Sidebar() {\n  const [assets] = useAssets();\n  const stages = useStages();\n  // This function updates a stage in-place\n  const updateStage = useUpdateStage();\n\n  const dispatch = useDispatch();\n\n  const [selectedStageId, selectStageId] = useState<UUID | null>(null);\n  const close = () => selectStageId(null);\n\n  return (\n    <Row>\n      <h6>Stages</h6>\n      <Table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Asset</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {stages.toList().map(stage =>\n            <tr key={stage.stageId}>\n              <td><EditField value={stage.name} setValue={name => updateStage({ ...stage, name })} /></td>\n              <td>{assets.find(({ assetId }) => stage.assetId === assetId)?.name || 'No asset found'}</td>\n              <td>\n                <ButtonGroup>\n                  <Button\n                    variant='primary'\n                    onClick={() => selectStageId(stage.stageId)}\n                  >\n                    <FaEllipsisH />\n                  </Button>\n                  <Button\n                    variant='danger'\n                    onClick={() => dispatch({\n                      type: 'DeleteStage',\n                      stage\n                    })}>\n                    <FaTrash />\n                  </Button>\n                </ButtonGroup>\n              </td>\n            </tr>\n          )}\n          <StageAddingForm />\n        </tbody>\n      </Table>\n      <Modal show={selectedStageId !== null} onEscapeKeyDown={close}>\n        {selectedStageId !== null  ?\n          <VolumeEditor stageId={selectedStageId} selectStageId={selectStageId} close={close} /> :\n          'No stage selected'\n        }\n      </Modal>\n    </Row>\n  );\n}","import React from 'react';\nimport { Coordinates } from '../types';\n\ninterface EdgeSVGProps {\n  origin: Coordinates;\n  destination: Coordinates;\n}\n/**\n * A simple SVG component for rendering edges between stages\n */\nexport default function EdgeSVG({\n  origin, destination\n}: EdgeSVGProps) {\n  return <line\n    x1={origin.x}\n    y1={origin.y}\n    x2={destination.x}\n    y2={destination.y}\n    stroke='#999'\n    strokeOpacity='0.6'\n    strokeWidth='10'\n  />;\n}","import React from 'react';\nimport {\n  AccessPoint,\n  Coordinates\n} from '../types';\nimport {\n  objectToColor\n} from '../utils';\n\nconst outerRadius = 12;\nconst innerRadius = outerRadius / 2;\n\ninterface AccessPointSVGProps {\n  location: Coordinates;\n  accessPoint: AccessPoint;\n}\nexport default function AccessPointSVG({\n  accessPoint,\n  location\n}: AccessPointSVGProps) {\n  const color = objectToColor(accessPoint.type.fields);\n  const { x, y } = location;\n\n  return (\n    <>\n      {accessPoint.type.streamed ?  <>{\n        [1, 2].map(idx =>\n          <circle\n            key={idx}\n            r={outerRadius}\n            cx={x - idx * innerRadius / 2}\n            cy={y - idx * innerRadius / 2}\n            stroke='black'\n            strokeWidth='1px'\n            fillOpacity='0'\n          />\n        )\n      }</> : null}\n      <circle\n        r={outerRadius}\n        cx={x}\n        cy={y}\n        fill={accessPoint.kind === 'Requester' ? color : 'white'}\n        stroke='black'\n        strokeWidth='1px'\n      />\n      <circle\n        r={innerRadius}\n        cx={x}\n        cy={y}\n        fill={accessPoint.kind === 'Responder' ? color : 'white'}\n        stroke='black'\n      />\n    </>\n  );\n}","import React, { useEffect } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport {\n  Drag,\n  Edge,\n  Stage\n} from '../types';\nimport {\n  accessPointLocation,\n  compatibleMethods,\n  findStage\n} from '../utils';\nimport {\n  useDispatch,\n  useEdges,\n  useStages\n} from '../state';\nimport AccessPointSVG from './AccessPointSVG';\n\ninterface StageSVGProps {\n  stage: Stage;\n  drag: Drag | null;\n  setDrag: (drag: Drag) => void;\n  restartSimulation: () => void;\n}\n/**\n * An SVG component for visualizing stages\n * Each stage is represented as an ellipse with its name written\n * It also has a set of colored ovals representing accessPoints around its edge\n */\nexport default function StageSVG({\n  stage,\n  drag,\n  setDrag,\n  restartSimulation\n} : StageSVGProps) {\n  const { name, x, y, rx, ry } = stage;\n  const stages = useStages();\n  const edges = useEdges();\n  const dispatch = useDispatch();\n\n  return (\n    <g>\n      <ellipse\n        rx={rx}\n        ry={ry}\n        cx={x}\n        cy={y}\n        fill='#e8e8e8'\n        fillOpacity='0.5'\n        stroke='#000'\n        strokeWidth='1px'\n        cursor={drag ? 'grabbing' : 'grab'}\n        onMouseDown={({clientX, clientY}) => {\n          setDrag({\n            offset: {\n              x: x - clientX,\n              y: y - clientY\n            },\n            cursor: {\n              x: clientX, y: clientY\n            },\n            stage,\n            dragKind: 'Stage'\n          });\n          restartSimulation();\n        }}\n      />\n      <text\n        pointerEvents='none'\n        textAnchor='middle'\n        stroke='#fff'\n        strokeWidth='0.5'\n        strokeOpacity='0.6'\n        fill='#000'\n        fontSize='16px'\n        x={x}\n        y={y}\n      >{name}</text>\n      {\n        [stage.requester, stage.responder].map(accessPoint => {\n          // Skip empty accessPoint's. See https://github.com/ndrewtl/drafter/issues/8\n          if (accessPoint.type.name === 'Empty') { return null; }\n          const loc = accessPointLocation(stage, accessPoint.kind);\n          return <g\n            key={accessPoint.kind}\n            onMouseDown={({ clientX, clientY }) => {\n              const edge = edges.find(({ requesterId, responderId }) =>\n                accessPoint.kind === 'Requester' ?\n                  requesterId === stage.stageId :\n                  responderId === stage.stageId\n              );\n              if (edge) {\n                dispatch({ type: 'DeleteEdge', edge });\n                const oppositeStage = findStage(\n                  stages,\n                  accessPoint.kind === 'Requester' ? edge.responderId : edge.requesterId\n                );\n                if (oppositeStage.kind === 'Error') { throw oppositeStage; }\n                setDrag({\n                  offset: {\n                    x: loc.x - clientX,\n                    y: loc.y - clientY\n                  },\n                  cursor: {\n                    x: clientX,\n                    y: clientY\n                  },\n                  stage: oppositeStage,\n                  dragKind: accessPoint.kind === 'Requester' ? 'Responder' : 'Requester'\n                });\n              } else {\n                setDrag({\n                  offset: {\n                    x: loc.x - clientX,\n                    y: loc.y - clientY\n                  },\n                  cursor: {\n                    x: clientX,\n                    y: clientY\n                  },\n                  stage,\n                  dragKind: accessPoint.kind\n                });\n              }\n            }}\n            onMouseUp={() => {\n              if (drag) {\n                if (accessPoint.kind === 'Requester' &&\n                    drag.dragKind === 'Responder' &&\n                    compatibleMethods(accessPoint, drag.stage.responder)\n                ) {\n                  // Add edge\n                  dispatch({\n                    type: 'AddEdge',\n                    edge: { edgeId: uuid(), requesterId: stage.stageId, responderId: drag.stage.stageId }\n                  });\n                } else if (accessPoint.kind === 'Responder' &&\n                    drag.dragKind === 'Requester' &&\n                    compatibleMethods(drag.stage.requester, accessPoint)\n                ) {\n                  // Add edge\n                  dispatch({\n                    type: 'AddEdge',\n                    edge: { edgeId: uuid(), requesterId: drag.stage.stageId, responderId: stage.stageId }\n                  });\n                }\n              }\n            }}\n          >\n            <AccessPointSVG\n              location={loc}\n              accessPoint={accessPoint}\n            />\n          </g>;\n        })\n      }\n    </g>\n  );\n}","import React, { useEffect, useReducer, useState } from 'react';\nimport {\n  forceManyBody,\n  forceSimulation,\n  forceX,\n  forceY\n} from 'd3-force';\nimport {\n  Drag,\n  Stage\n} from '../types';\nimport { accessPointLocation, findStage } from '../utils';\nimport { useEdges, useStages } from '../state';\nimport EdgeSVG from './EdgeSVG';\nimport StageSVG from './StageSVG';\n\n/**\n * This component is the core of Drafter. It displays the network of stages and allows you to drag\n * them around, edit, or remove them\n */\nexport default function Graph() {\n  const [simulation] = useState(forceSimulation<Stage>().stop());\n  const [drag, setDrag] = useState<Drag | null>(null);\n  const stages = useStages();\n  // TODO move these into state container\n  const edges = useEdges();\n\n  const [, update] = useReducer(x => x + 1, 0);\n\n  // TODO make these configurable?\n  const width = 600;\n  const height = 800;\n  const initialAlpha = 0.5;\n  const alphaTarget = 0;\n\n  useEffect(() => {\n    simulation.nodes(stages.valueSeq().toArray());\n    simulation\n      .force('vertical-center', forceX(width / 2).strength(0.01))\n      .force('horizontal-center', forceY(height / 2).strength(0.01))\n      .force('charge', forceManyBody().strength(-100));\n    simulation.alpha(initialAlpha);\n    simulation.alphaTarget(alphaTarget).restart();\n  }, [stages, edges]);\n\n  simulation.on('tick', () => {\n    update();\n  });\n\n  const restartSimulation = () => {\n    simulation\n      .alpha(initialAlpha)\n      .restart();\n  };\n\n  useEffect(() => {\n    if (drag) {\n      const {cursor, offset, stage, dragKind} = drag;\n      if (dragKind === 'Stage') {\n        stage.fx! = cursor.x + offset.x;\n        stage.fy! = cursor.y + offset.y;\n      }\n    }\n  }, [drag]);\n  return (\n    <svg\n      width={width}\n      height={height}\n      style={{\n        border: '1px solid black'\n      }}\n      viewBox={`0 0 ${width} ${height}`}\n      onMouseMove={({ clientX, clientY }) => {\n        if (drag) {\n          setDrag({\n            ...drag,\n            cursor: { x: clientX, y: clientY }\n          });\n        }\n      }}\n      onMouseUp={() => {\n        if (drag) {\n          if (drag.dragKind === 'Stage') {\n            const { stage } = drag;\n            stage.fx = stage.fy = null;\n            restartSimulation();\n          }\n          setDrag(null);\n        }\n      }}\n      onMouseLeave={() => {\n        if (drag) {\n          if (drag.dragKind === 'Stage') {\n            const { stage } = drag;\n            stage.fx = stage.fy = null;\n            restartSimulation();\n          }\n          setDrag(null);\n        }\n      }}\n    >\n      {edges.map(({ requesterId, responderId }) => {\n        // Look up each id\n        const requester = findStage(stages, requesterId);\n        const responder = findStage(stages, responderId);\n        if (requester.kind !== 'Error' &&\n            responder.kind !== 'Error') {\n          return <EdgeSVG\n            key={`edge-${requester.stageId}-${responder.stageId}`}\n            origin={accessPointLocation(requester, 'Requester')}\n            destination={accessPointLocation(responder, 'Responder')}\n          />;\n        } else {\n          return null;\n        }\n      })}\n      {(() => {\n        if (drag && drag.dragKind !== 'Stage') {\n          const {\n            offset,\n            cursor,\n            stage,\n            dragKind\n          } = drag;\n          const eloc = accessPointLocation(stage, dragKind);\n          return <EdgeSVG\n            origin={eloc}\n            destination={\n              { x: cursor.x + offset.x, y: cursor.y + offset.y }\n            }\n          />;\n        }})()}\n      {stages.valueSeq().map(stage => <StageSVG\n        stage={stage}\n        key={stage.stageId}\n        drag={drag}\n        setDrag={setDrag}\n        restartSimulation={restartSimulation}\n      />)}\n\n    </svg>\n  );\n}","import React from 'react';\nimport {\n  Col,\n  Row\n} from 'react-bootstrap';\nimport Sidebar from './Sidebar';\nimport Graph from './Graph';\n\n/**\n * This component contains all functionality for adding, removing, and editing stages.\n * It contains the Sidebar and the Graph.\n */\nexport default function Editor() {\n  // TODO store state somewhere like localStorage or idb-keyval\n  // write a custom hook to serialize / deserialize this\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <Sidebar />\n        </Col>\n        <Col><Graph /></Col>\n      </Row>\n    </>\n  );\n}","import React, { useRef, useState } from 'react';\nimport {\n  Button,\n  Form,\n  Table\n} from 'react-bootstrap';\nimport { FaPlus, FaTrash } from 'react-icons/fa';\nimport { fileContent, remoteMethodToString, reportError } from '../utils';\nimport { useAssets, useCreateAsset, useDispatch, useUpdateAsset } from '../state';\nimport EditField from './EditField';\n\nfunction AssetAddingForm() {\n  const createAsset = useCreateAsset();\n  const [name, setName] = useState('');\n  const [image, setImage] = useState('');\n  const filesRef = useRef<HTMLInputElement | null>(null);\n  return (\n    <tr>\n      <td>\n        <Form.Control\n          placeholder='Asset name'\n          value={name}\n          onChange={({ target: { value }}) => setName(value)}\n        />\n      </td>\n      <td>\n        <Form.Control\n          placeholder='<dockerid>/reponame'\n          value={image}\n          onChange={({ target: { value }}) => setImage(value)}\n        />\n      </td>\n      <td>\n        <Form.Control\n          type='file'\n          ref={filesRef}\n          accept='.proto'\n        />\n      </td>\n      <td>\n        <Button\n          variant='primary'\n          onClick={async () => {\n            const inputElement = filesRef.current;\n            if (inputElement) {\n              const content = await fileContent(inputElement);\n              if (typeof content === 'string') {\n                createAsset({\n                  name,\n                  image,\n                  protobufCode: content\n                });\n              } else {\n                reportError(content);\n              }\n\n              setName('');\n              setImage('');\n              inputElement.value = '';\n            }\n          }}\n        ><FaPlus /></Button>\n      </td>\n    </tr>\n  );\n}\n\n/**\n * This component lists the current Assets and allows you to modify them, delete them, or add more\n */\nexport default function Assets() {\n  // Keep a list of the state assets\n  const dispatch = useDispatch();\n  const [assets] = useAssets();\n  const updateAsset = useUpdateAsset();\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Asset Name</th>\n          <th>Image</th>\n          <th>Protobuf Interface</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        {assets.map(asset => <tr key={asset.assetId}>\n          <td><EditField value={asset.name} setValue={name => updateAsset({ ...asset, name })} /></td>\n          <td><EditField value={asset.image} setValue={image => updateAsset({ ...asset, image })} /></td>\n          <td>{asset.methods.map(method => <pre key={method.remoteMethodId}>{remoteMethodToString(method)}</pre>)}</td>\n          <td>\n            <Button\n              variant='danger'\n              onClick={() => dispatch({\n                type: 'DeleteAsset',\n                asset\n              })}>\n              <FaTrash />\n            </Button>\n          </td>\n        </tr>)}\n        <AssetAddingForm />\n      </tbody>\n    </Table>\n  );\n}","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './Header';\nimport Editor from './Editor';\nimport Assets from './Assets';\nimport { BrowserRouter } from 'react-router-dom';\nimport {\n  Container,\n  Row,\n  Tab,\n  Tabs\n} from 'react-bootstrap';\n\n/**\n * The global App container for Drafter\n */\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Header />\n      <Container>\n        <Row>\n          <hr />\n        </Row>\n        <Row>\n          <Tabs defaultValue='assets'>\n            <Tab eventKey='assets' title='Assets'>\n              <Assets />\n            </Tab>\n            <Tab style={{padding:15}} eventKey='editor' title='Editor'>\n              <Editor />\n            </Tab>\n          </Tabs>\n        </Row>\n      </Container>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}