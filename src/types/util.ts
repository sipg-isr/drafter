/**
 * This file defines simple utility types that are used for other operations
 */

/**
 * An interface that represents the x and y coordinates of an object in space
 * @property {number} x
 * @property {number} y
 */
export interface Coordinates {
  x: number;
  y: number;
}

/**
 * A Universally Unique Identifier, as generated by the uuid library.
 */
export type UUID = string;

/**
 * A path on disk
 */
export type Path = string;

/**
 * A type identifying what kind of problem caused an error
 */
export enum ErrorKind {
  ParsingError = 'ParsingError',
  AssetNotFound = 'AssetNotFound',
  StageNotFound = 'StageNotFound',
  AccessPointNotFound = 'AccessPointNotFound',
  FileInputError = 'FileInputError'
}

/**
 * A custom error type, used for reporting errors in the result type below
 * @interface
 * @property {ErrorKind} errorKind - what kind of problem caused this error
 * @property {string} message - a human-language description of what caused the error
 */
export interface Error {
  kind: 'Error',
  errorKind: ErrorKind;
  message: string;
}

/**
 * A result type, as in Haskell or Rust. Used to either produce a value or fail with a given error
 */
export type Result<T> = T | Error;